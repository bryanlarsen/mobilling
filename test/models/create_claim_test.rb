require "test_helper"

class CreateClaimTest < ActiveSupport::TestCase
  def assert_warn(form, field)
    assert form.has_warnings?
    assert form.warnings.has_key?(field)
  end

  setup do
    @user = create(:user)
    @claim = build(:claim, user: @user, status: "saved", specialty: "internal_medicine", number: nil)
  end

  test "performs properly" do
    @claim.save!
  end

  test "performs properly with for_agent status" do
    assert_equal nil, @claim.number
    @claim.status = "for_agent"
    @claim.photo_id = create(:photo).id
    @claim.patient_name = "Alice James"
    @claim.patient_number = "9876543217HA"
    @claim.patient_province = "ON"
    @claim.patient_birthday = "1999-09-09"
    @claim.patient_sex = "F"
    @claim.hospital = "1681"
    @claim.diagnoses = [{name: "Flu"}]
    @claim.most_responsible_physician = true
    @claim.admission_on = 1.week.ago.to_date.to_s
    @claim.first_seen_on = 3.days.ago.to_date.to_s
    @claim.first_seen_consult = true
    @claim.last_seen_on = 1.day.ago.to_date.to_s
    @claim.last_seen_discharge = false
    @claim.icu_transfer = false
    @claim.consult_type = "comprehensive_er"
    @claim.consult_time_in = "17:00"
    @claim.consult_time_out = "20:00"
    @claim.consult_premium_visit = "holiday_day"
    @claim.consult_premium_first = true
    @claim.consult_premium_travel = true
    @claim.items = [build(:item, day: "2014-06-30", rows:[build(:row, code: "E082", fee: 1792)])]
    assert @claim.valid?
    assert @claim.no_warnings?
    @claim.save!
    assert_equal 1, @claim.number
    assert_equal @claim.total_fee, 1792
  end

  test "is invalid with invalid photo_id" do
    @claim.photo_id = "invalid"
    assert_equal @claim.photo_id, nil
  end

  test "is invalid with invalid status" do
    begin
      @claim.status = "invalid"
    rescue ArgumentError => e
      true
    else
      assert false
    end
  end

  test "warns on missing patient_name" do
    @claim.patient_name = nil
    assert_warn @claim, :patient_name
  end

  test "warns on blank patient_name" do
    @claim.patient_name = ""
    assert_warn @claim, :patient_name
  end

  test "is invalid with invalid hospital" do
    @claim.hospital = 0
    assert_warn @claim, :hospital
  end

  test "is valid with valid hospital" do
    @claim.hospital = "1681 QCH"
    @claim.has_warnings?
    assert @claim.warnings[:hospital].blank?
  end

  test "warns on missing hospital" do
    @claim.hospital = ''
    assert_warn @claim, :hospital
  end

  # test "warns on missing diagnoses" do
  #   @claim.status = "for_agent"
  #   @claim.diagnoses = []
  #   assert_warn @claim, :diagnoses
  # end

  test "is invalid with invalid referring_physician" do
    @claim.referring_physician = "7"
    assert_warn @claim, :referring_physician
   end

  # test "is invalid with invalid most_responsible_physician" do
  #   @claim.most_responsible_physician = "true"
  #   assert_invalid @claim, :most_responsible_physician
  # end

  # test "warns on missing most_responsible_physician" do
  #   @claim.status = "for_agent"
  #   @claim.most_responsible_physician = nil
  #   assert_invalid @claim, :most_responsible_physician
  # end

  test "warns on missing first_seen_on" do
    @claim.first_seen_on = nil
    assert_warn @claim, :first_seen_on
  end

  test "warns on missing last_seen_on" do
    @claim.last_seen_on = nil
    assert_warn @claim, :last_seen_on
  end

  test "warns on missing admission_on" do
    @claim.admission_on = nil
    assert_warn @claim, :admission_on
  end

  test "is invalid with invalid consult_type" do
    @claim.consult_type = "invalid"
    assert_invalid @claim, :consult_type
  end

  test "is invalid with invalid consult_premium_visit" do
    @claim.consult_premium_visit = "invalid"
    assert_invalid @claim, :consult_premium_visit
  end

  test "is invalid with invalid consult_time_in" do
    @claim.consult_time_in = "5am"
    assert_warn @claim, :consult_time_in
  end

  test "is invalid with invalid consult_time_out" do
    @claim.consult_time_out = "5am"
    assert_warn @claim, :consult_time_out
  end

  # test "is invalid with invalid daily_details day" do
  #   @claim.items[0].day = "01-01-2014"
  #   assert_warn @claim, "daily_details.0.day"
  # end

  # test "is invalid with invalid daily_details code" do
  #   @claim.items = [build(:item, day: "2014-06-30", rows:[build(:row, code: "X", fee: 1792, units: 1)])]
  #   assert @claim.items[0].rows[0].has_warnings?
  #   assert @claim.items[0].rows[0].warnings.has_key?(:code)
  #   puts @claim.has_warnings?
  #   puts @claim.warnings.to_json
  #   assert_warn @claim, :items
  # end

  # test "is invalid with daily_details without day when submitted" do
  #   @claim.daily_details = [{code: "A082", autogenerated: false}]
  #   assert_warn @claim, "daily_details.0.day"
  # end

  # test "is invalid with daily_details without code when submitted" do
  #   @claim.daily_details = [{day: "2014-02-01", autogenerated: false}]
  #   assert_warn @claim, "daily_details.0.code"
  # end

  # test "is invalid with daily_details without autogenerated when submitted" do
  #   @claim.daily_details = [{day: "2014-02-01", code: "A082"}]
  #   assert_warn @claim, "daily_details.0.fee"
  # end

  # test "is invalid with empty daily_details when submitted" do
  #   @claim.items = []
  #   assert_warn @claim, :items
  # end

end
