class ClaimForm
  include ActiveModel::Model
  include Virtus.model
  include ValidationScopes

  def self.model_params
    return [
            [:photo_id, Integer],
            [:status, String],
           ]
  end

  def self.details_params
    return [
            [:specialty, String],
            [:patient_name, String],
            [:hospital, String],
            [:referring_physician, String],
            [:most_responsible_physician, :bool],
            [:procedure_on, String],
            [:admission_on, String],
            [:first_seen_on, String],
            [:first_seen_consult, :bool],
            [:last_seen_on, String],
            [:last_seen_discharge, :bool],
            [:icu_transfer, :bool],
            [:consult_type, String],
            [:consult_time_in, String],
            [:consult_time_out, String],
            [:consult_premium_visit, String],
            [:consult_premium_first, :bool],
            [:consult_premium_travel, :bool],
            [:patient_number, String],
            [:patient_province, String],
            [:patient_birthday, String],
            [:patient_sex, String],
            [:referring_laboratory, String],
            [:payment_program, String],
            [:payee, String],
            [:manual_review_indicator, String],
            [:service_location, String],
           ]
  end

  def self.scalar_params
    return model_params + details_params + [[:comment, String]]
  end

  def self.array_params
    return [
            [:diagnoses, Array, [[:name, String]]],
            [:daily_details, Array, [
                                     [:day, String],
                                     [:code, String],
                                     [:time_in, String],
                                     [:time_out, String],
                                     [:autogenerated, :bool],
                                     [:fee, Integer],
                                     [:units, Integer],
                                     [:message, String],
                                     [:premiums, Array, [
                                                         [:code, String],
                                                         [:fee, Integer],
                                                         [:units, Integer],
                                                         [:message, String],
                                                        ]
                                     ]
                                    ]
            ]
           ]
  end

  def self.all_params
    return scalar_params + array_params
  end

  def self.param_names(list)
    return list.map do |name, type, array|
      if type == Array
        { name => param_names(array) }
      else
        name
      end
    end
  end

  def self.all_param_names
    param_names(all_params)
  end

  all_params.each do |name, type|
    if type == :bool
      attribute name, Axiom::Types::Boolean
    else
      attribute name, type
    end
  end
  attribute :user, User

#  attr_accessor *(scalar_params.map &:first)

#  attr_accessor :user, :photo_id
#  attr_writer :daily_details, :diagnoses

  attr_reader :claim

  validates :photo_id, uuid: true, allow_nil: true
  validates :status, inclusion: {in: Claim.statuses.keys}
  validates :user, presence: true

  validates :most_responsible_physician, :first_seen_consult, :last_seen_discharge, :icu_transfer, :consult_premium_travel, :consult_premium_first, inclusion: {in: [false, true]}, allow_nil: true
  validates :first_seen_on, :last_seen_on, :admission_on, :procedure_on, date: true, format: {with: /\A\d{4}-\d{2}-\d{2}\Z/}, type: {is_a: String}, allow_nil: true
  validates :consult_type, inclusion: {in: Claim::CONSULT_TYPES}, allow_nil: true
  validates :consult_premium_visit, inclusion: {in: Claim::CONSULT_PREMIUM_VISITS}, allow_nil: true
  validates :specialty, inclusion: {in: User::SPECIALTIES}
  validates :consult_time_in, :consult_time_out, time: true, format: {with: /\A\d{2}:\d{2}\Z/, type: {is_a: String}}, allow_nil: true
  validates :admission_on, :first_seen_on, :last_seen_on, presence: true, if: -> { submitted? and not simplified? }
  validates :procedure_on, presence: true, if: -> { submitted? and simplified? }
  validates :most_responsible_physician, :last_seen_discharge, inclusion: {in: [true, false]}, if: -> { submitted? and not simplified? }
  validates :daily_details, associated: true
  validates :daily_details, length: {minimum: 1}, if: :submitted?

  validation_scope :warnings do |s|
    s.validates :patient_name, :hospital, presence: true
  end

  def submitted?
    # FIXME: used for validations, is wrong
    status != "saved"
  end

  def simplified?
    %w[anesthesiologist surgical_assist psychotherapist].include?(specialty)
  end

  def daily_details
    return @daily_details unless @daily_details.is_a?(Array)
    @daily_details.map { |daily_detail| DailyDetailForm.new(daily_detail) }
  end

  def diagnoses
    return @diagnoses unless @diagnoses.is_a?(Array)
    @diagnoses.map { |diagnosis| DiagnosisForm.new(diagnosis) }
  end

  def initialize(claim, attributes = nil)
    if !claim.is_a?(Claim)
      super(claim)
    else
      @claim = claim
      attrs = claim.details.except("diagnosis")
      attrs['status'] = claim.status   # can't use claim.attributes.slice because status is an enum
      attrs['user'] = claim.user
      attrs['photo_id'] = claim.photo_id
      attrs.merge!(attributes) if attributes
      super(attrs)
    end
  end

  def perform
    return false if invalid?
    unless @claim
      @claim = user.claims.build
      @claim.number = user.claims.maximum(:number).to_i.succ
    end
    @claim.update!(claim_attributes)
    @claim.comments.create!(user: user, body: comment) if comment.present?
    true
  end

  def claim_attributes
    {
      photo_id: photo_id,
      status: status,
      details: claim_attribute_details
    }
  end

  def claim_attribute_details
    {}.tap do |dets|
      self.class.details_params.each do |param, klass|
        dets[param.to_s] = self.send(param)
      end
      dets["diagnoses"] = (diagnoses || []).map(&:as_json)
      dets["daily_details"] = (daily_details || []).map(&:as_json).sort_by { |daily_detail| daily_detail["day"] }
    end
  end

  def as_json(options = nil)
    valid?
    has_warnings?
    attributes.merge(@claim ? {id: @claim.id,
                       status: @claim.status,
                       number: @claim.number,
                       created_at: @claim.created_at,
                       updated_at: @claim.updated_at
                     } : {}).merge({
                                     errors: errors,
                                     warnings: warnings,
                                   }).tap do |response|
      if options && options[:include_comments]
        response[:comments] = @claim.comments.map do |comment|
          {
            body: comment.body,
            user_name: comment.user.try(:name),
            created_at: comment.created_at,
          }
        end
      end
    end
  end
end
