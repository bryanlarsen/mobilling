class DailyDetailForm
  include ActiveModel::Model

  attr_accessor :interactor, :day, :code, :time_in, :time_out, :autogenerated, :fee, :units
  attr_writer :premiums

  # note that these validations are not helpful.   Rails just reports them as errors in daily_details rather than listing the field causing the errors, and the angular app doesn't report an error to the user.

  validates :day, date: true, format: {with: /\A\d{4}-\d{2}-\d{2}\Z/}, type: {is_a: String}, allow_nil: true
  validates :code, type: {is_a: String}, allow_nil: true
  validates :time_in, :time_out, time: true, format: {with: /\A\d{2}:\d{2}\Z/, type: {is_a: String}}, allow_nil: true
  validates :autogenerated, inclusion: {in: [false, true]}, allow_nil: true
  validates :autogenerated, inclusion: {in: [false, true]}, if: :submitted?
  validates :day, :code, presence: true, if: :submitted?
  validates :time_in, :time_out, presence: true, if: -> { submitted? and simplified? }

  validates :premiums, associated: true

  # cannot turn on validation here for several reasons:
  #  1. the asynchronous nature of their generation means that they may not be generated as quickly as the test runs.   (However, in practice this isn't a problem since we are abusing integration tests instead of writing proper javascript & angular controller tests)
  #  2. It's valid to submit incomplete claims when running in an agent-assisted mode.   It's the agent's job to fill in the missing details.

#  validates :fee, type: {is_a: Integer}
#  validates :units, type: {is_a: Integer}

  def submitted?
    interactor.present? and interactor.submitted?
  end

  def simplified?
    interactor.present? and interactor.simplified?
  end

  def premiums
    return @premiums unless @premiums.is_a?(Array)
    @premiums.map { |premium| PremiumForm.new(premium).tap { |premium| premium.interactor = self } }
  end

  def as_json
    super(only: %w[day code time_in time_out autogenerated fee units premiums])
  end
end
